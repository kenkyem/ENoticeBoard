@using ObjectFormViewModel = ENoticeBoard.ViewModels.ObjectFormViewModel

@model ObjectFormViewModel

@{
    ViewBag.Title = "Create";
}


<form id="frmCreateObject">
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        <div class="col-md-12">
            <div class="form-group">
                @Html.LabelFor(model => model.Subject, "Object")
                @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Date)
                @Html.TextBoxFor(model => model.Date, "{0:dd/MM/yyyy}", new { @class = "form-control", @Type = "DateTime" })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Cost)
                <div class="input-group">
                    <div class="input-group-addon">$</div>
                    @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control pull-right", @type = "number", @dir = "rtl" } })
                    @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description)
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "3" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

            </div>

        </div>
        <button type="button" id="btnSaveObject" value="Save" class="btn btn-success">Save</button>
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
    </div>
</form>

<script type="text/javascript">
    $('input[type=datetime]').datepicker({
        dateFormat: "dd/mm/yy",
        changeMonth: true,
        changeYear: true,
        maxDate:0,
        yearRange: "-2:+10"
    });
    $('#btnSaveObject').click(function () {
        if ($("#Subject").val().trim() === "" ||
            $("#Date").val().trim() === "" ||
            $("#Cost").val().trim() === "")
        {
            alert("All fields are required");
            return;
        }
        if ($("#Subject").val().length >100) {
            alert("Subject is too long");
            return;
        }
        if ($("#Description").val().length > 300) {
            alert("Description is too long");
            return;
        }
        else {
            var s = moment($('#Date').val(), "DD/MM/YYYY", true);
            var isValid = s.isValid();
            if (isValid === false) {
                alert("Invalid date format: " + $('#Date').val());
                return;
            }
        }
        var $this = $("#frmCreateObject");
        var dataToSend = $this.serialize();

        $.ajax({
            type: "POST",
            url: '@Url.Action("Create", "Objects")',
            dataType: 'json',
            data: dataToSend,
            success: function(data) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Summary", "Objects")',
                    dataType: 'html',
                    success: function(data) {
                        $("#createModal").modal('hide');
                        $('#setModalTitle').html("Budget");
                        $("#PanelModalBody").html(data);
                        $("#PanelModal").modal('show');
                    },
                    error: function(data) {
                        console.log(data);
                    }
                });
            },
            error: function(data) {
                console.log(data);
            }
        });
        
    });
</script>
